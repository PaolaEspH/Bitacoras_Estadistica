geom_text(aes(label = Frecuencia), color = "white", size = 6) +
scale_fill_identity() +  # Usar los colores definidos
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = paste("Tabla de Contingencia: Severidad vs", var), fill = "Frecuencia")
# Guardar la imagen en formato JPG
ggsave(paste0("contingency_table_", var, ".jpg"), plot = p, width = 8, height = 6, dpi = 300)
}
# Cargar paquetes necesarios
library(tidyverse)
library(janitor)
library(readr)
# Cargar y limpiar el dataset
df <- read_csv("../data/data_traducida.csv") %>% select(-colnames(df)[1])
df <- df[!(df$carretera == "Final del asfalto" | df$iluminación == "Desconocido"), ]
# Convertir severidad a factor
df$severidad <- as.factor(df$severidad)
# Eliminar columnas con demasiados NA
df <- df %>% select(where(~ mean(is.na(.)) < 0.3))
# Identificar variables válidas (excluyendo la variable objetivo)
variables <- setdiff(colnames(df), "severidad")
# Crear tabla de resultados
resultados <- data.frame(variable = character(),
tipo = character(),
prueba = character(),
p_value = numeric(),
stringsAsFactors = FALSE)
# Recorrer las variables
for (var in variables) {
variable <- df[[var]]
if (is.numeric(variable)) {
# Prueba t si hay solo 2 niveles, si no, ANOVA
if (nlevels(df$severidad) == 2) {
p <- tryCatch(t.test(variable ~ severidad, data = df)$p.value, error = function(e) NA)
test <- "t-test"
} else {
modelo <- tryCatch(aov(variable ~ severidad, data = df), error = function(e) NULL)
p <- if (!is.null(modelo)) summary(modelo)[[1]][["Pr(>F)"]][1] else NA
test <- "ANOVA"
}
resultados <- rbind(resultados, data.frame(variable = var, tipo = "numérica", prueba = test, p_value = p))
} else if (is.character(variable) || is.factor(variable)) {
tabla <- table(df[[var]], df$severidad)
if (all(dim(tabla) > 1)) {
p <- tryCatch(chisq.test(tabla)$p.value, error = function(e) NA)
resultados <- rbind(resultados, data.frame(variable = var, tipo = "categórica", prueba = "chi-cuadrado", p_value = p))
}
}
}
# Ordenar y filtrar por significancia (p < 0.05)
resultados_significativos <- resultados %>%
filter(!is.na(p_value), p_value < 0.05) %>%
arrange(p_value)
# Mostrar los 5 más significativos
print(head(resultados_significativos, 5))
# Exportar maqueta de resultados
write_csv(resultados_significativos, "resultados_significativos.csv")
shapiro.test(df$severidad)
# Cargar paquetes necesarios
library(tidyverse)
library(janitor)
library(readr)
# Cargar y limpiar el dataset
df <- read_csv("../data/data_traducida.csv") %>% select(-colnames(df)[1])
df <- df[!(df$carretera == "Final del asfalto" | df$iluminación == "Desconocido"), ]
# Convertir severidad a factor
df$severidad <- as.factor(df$severidad)
# Eliminar columnas con demasiados NA
df <- df %>% select(where(~ mean(is.na(.)) < 0.3))
# Identificar variables válidas (excluyendo la variable objetivo)
variables <- setdiff(colnames(df), "severidad")
# Crear tabla de resultados
resultados <- data.frame(variable = character(),
tipo = character(),
prueba = character(),
p_value = numeric(),
stringsAsFactors = FALSE)
# Recorrer las variables
for (var in variables) {
variable <- df[[var]]
if (is.numeric(variable)) {
# Prueba t si hay solo 2 niveles, si no, ANOVA
if (nlevels(df$severidad) == 2) {
p <- tryCatch(t.test(variable ~ severidad, data = df)$p.value, error = function(e) NA)
test <- "t-test"
} else {
modelo <- tryCatch(aov(variable ~ severidad, data = df), error = function(e) NULL)
p <- if (!is.null(modelo)) summary(modelo)[[1]][["Pr(>F)"]][1] else NA
test <- "ANOVA"
}
resultados <- rbind(resultados, data.frame(variable = var, tipo = "numérica", prueba = test, p_value = p))
} else if (is.character(variable) || is.factor(variable)) {
tabla <- table(df[[var]], df$severidad)
if (all(dim(tabla) > 1)) {
p <- tryCatch(chisq.test(tabla)$p.value, error = function(e) NA)
resultados <- rbind(resultados, data.frame(variable = var, tipo = "categórica", prueba = "chi-cuadrado", p_value = p))
}
}
}
# Ordenar y filtrar por significancia (p < 0.05)
resultados_significativos <- resultados %>%
filter(!is.na(p_value), p_value < 0.05) %>%
arrange(p_value)
# Mostrar los 5 más significativos
print(head(resultados_significativos, 5))
# Exportar maqueta de resultados
write_csv(resultados_significativos, "resultados_significativos.csv")
shapiro.test(df$severidad)
rownames(resultado_final) <- NULL
# 5. Mostrar
print(resultado_final)
for (var in names(df)[cat_vars]) {
# Crear tabla de contingencia
tabla <- table(df$severidad, df[[var]])
print(tabla)
}
# Crear tabla de contingencia y guardarla como imagen
for (var in names(df)[cat_vars]) {
# Crear tabla de contingencia
tabla <- table(df$severidad, df[[var]])
# Convertir la tabla a un formato 'data.frame' para usar con ggplot
df_tabla <- as.data.frame(tabla)
colnames(df_tabla) <- c("Severidad", "Categoría", "Frecuencia")
df_tabla$fill_color <- ifelse(df_tabla$Frecuencia < 5, "pink", "lightblue")
# Crear gráfico de la tabla de contingencia usando ggplot
p <- ggplot(df_tabla, aes(x = Severidad, y = Categoría, fill = fill_color)) +
geom_tile() +
geom_text(aes(label = Frecuencia), color = "white", size = 6) +
scale_fill_identity() +  # Usar los colores definidos
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = paste("Tabla de Contingencia: Severidad vs", var), fill = "Frecuencia")
# Guardar la imagen en formato JPG
ggsave(paste0("contingency_table_", var, ".jpg"), plot = p, width = 8, height = 6, dpi = 300)
}
unique(df$iluminación)
for (var in names(df)[cat_vars]) {
# Crear tabla de contingencia
tabla <- table(df$severidad, df[[var]])
# Convertir la tabla a un formato 'data.frame' para usar con ggplot
df_tabla <- as.data.frame(tabla)
colnames(df_tabla) <- c("Severidad", "Categoría", "Frecuencia")
df_tabla$fill_color <- ifelse(df_tabla$Frecuencia < 5, "pink", "lightblue")
# Crear gráfico de la tabla de contingencia usando ggplot
p <- ggplot(df_tabla, aes(x = Severidad, y = Categoría, fill = fill_color)) +
geom_tile() +
geom_text(aes(label = Frecuencia), color = "white", size = 6) +
scale_fill_identity() +  # Usar los colores definidos
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = paste("Tabla de Contingencia: Severidad vs", var), fill = "Frecuencia")
# Guardar la imagen en formato JPG
ggsave(paste0("contingency_table_", var, ".png"), plot = p, width = 8, height = 6, dpi = 300)
}
# Cargar paquetes necesarios
library(tidyverse)
library(janitor)
library(readr)
# Cargar y limpiar el dataset
df <- read_csv("../data/data_traducida.csv") %>% select(-colnames(df)[1])
df <- df[!(df$carretera == "Final del asfalto" | df$iluminación == "Desconocido"), ]
# Convertir severidad a factor
df$severidad <- as.factor(df$severidad)
# Eliminar columnas con demasiados NA
df <- df %>% select(where(~ mean(is.na(.)) < 0.3))
# Identificar variables válidas (excluyendo la variable objetivo)
variables <- setdiff(colnames(df), "severidad")
# Crear tabla de resultados
resultados <- data.frame(variable = character(),
tipo = character(),
prueba = character(),
p_value = numeric(),
stringsAsFactors = FALSE)
# Recorrer las variables
for (var in variables) {
variable <- df[[var]]
if (is.numeric(variable)) {
# Prueba t si hay solo 2 niveles, si no, ANOVA
if (nlevels(df$severidad) == 2) {
p <- tryCatch(t.test(variable ~ severidad, data = df)$p.value, error = function(e) NA)
test <- "t-test"
} else {
modelo <- tryCatch(aov(variable ~ severidad, data = df), error = function(e) NULL)
p <- if (!is.null(modelo)) summary(modelo)[[1]][["Pr(>F)"]][1] else NA
test <- "ANOVA"
}
resultados <- rbind(resultados, data.frame(variable = var, tipo = "numérica", prueba = test, p_value = p))
} else if (is.character(variable) || is.factor(variable)) {
tabla <- table(df[[var]], df$severidad)
if (all(dim(tabla) > 1)) {
p <- tryCatch(chisq.test(tabla)$p.value, error = function(e) NA)
resultados <- rbind(resultados, data.frame(variable = var, tipo = "categórica", prueba = "chi-cuadrado", p_value = p))
}
}
}
# Ordenar y filtrar por significancia (p < 0.05)
resultados_significativos <- resultados %>%
filter(!is.na(p_value), p_value < 0.05) %>%
arrange(p_value)
# Mostrar los 5 más significativos
print(head(resultados_significativos, 5))
# Exportar maqueta de resultados
write_csv(resultados_significativos, "resultados_significativos.csv")
shapiro.test(df$severidad)
qqline(df$severidad, col = "red")
hist(df$severidad, main = "Histograma", xlab = "Heridas menores")
num_vars <- sapply(df, is.numeric)
df_num <- df[, num_vars]
# 2. Aplicar la prueba de normalidad a cada variable numérica
for (var in names(df_num)) {
cat("\n==============================\n")
cat("Variable:", var, "\n")
cat("N:", length(df_num[[var]]), "\n")
cat("Media:", mean(df_num[[var]], na.rm = TRUE), "\n")
cat("Desviación estándar:", sd(df_num[[var]], na.rm = TRUE), "\n")
# Histograma
hist(df_num[[var]], main = paste("Histograma de", var), xlab = var, col = "skyblue", breaks = 50)
# QQ plot
qqnorm(df_num[[var]], main = paste("Q-Q plot de", var))
qqline(df_num[[var]], col = "red")
# Pausa para ver gráficos
readline(prompt = "Presiona [Enter] para continuar...")
}
df$severidad <- as.factor(df$severidad)
cat_vars <- sapply(df, is.factor)
cat_vars["severidad"] <- FALSE  # excluir variable dependiente
# 2. Inicializar lista para resultados
resultados <- list()
# 3. Evaluar cada variable categórica contra severidad
for (var in names(df)[cat_vars]) {
tabla <- table(df$severidad, df[[var]])
# Intentar prueba Chi-cuadrado
chi <- suppressWarnings(chisq.test(tabla))
# Evaluar supuestos
esperado <- chi$expected
valido <- all(esperado >= 1) & mean(esperado < 5) <= 0.2
if (valido) {
p_value <- chi$p.value
prueba <- "Chi-cuadrado"
} else {
# Usar prueba de Fisher
fisher <- suppressWarnings(fisher.test(tabla, simulate.p.value = TRUE, B = 10000))
p_value <- fisher$p.value
prueba <- "Fisher"
}
resultados[[var]] <- data.frame(
variable = var,
prueba = prueba,
p_value = p_value,
valido_chi = valido
)
}
# 4. Combinar resultados
resultado_final <- do.call(rbind, resultados)
rownames(resultado_final) <- NULL
# 5. Mostrar
print(resultado_final)
for (var in names(df)[cat_vars]) {
# Crear tabla de contingencia
tabla <- table(df$severidad, df[[var]])
print(tabla)
}
categorical_vars <- c("festivos", "iluminacion", "carretera", "clima")
# Crear tabla de contingencia y guardarla como imagen
for (var in names(df)[cat_vars]) {
# Crear tabla de contingencia
tabla <- table(df$severidad, df[[var]])
# Convertir la tabla a un formato 'data.frame' para usar con ggplot
df_tabla <- as.data.frame(tabla)
colnames(df_tabla) <- c("Severidad", "Categoría", "Frecuencia")
df_tabla$fill_color <- ifelse(df_tabla$Frecuencia < 5, "pink", "lightblue")
# Crear gráfico de la tabla de contingencia usando ggplot
p <- ggplot(df_tabla, aes(x = Severidad, y = Categoría, fill = fill_color)) +
geom_tile() +
geom_text(aes(label = Frecuencia), color = "white", size = 6) +
scale_fill_identity() +  # Usar los colores definidos
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = paste("Tabla de Contingencia: Severidad vs", var), fill = "Frecuencia")
# Guardar la imagen en formato JPG
ggsave(paste0("contingency_table_", var, ".jpg"), plot = p, width = 8, height = 6, dpi = 300)
}
df <- df[!(df$carretera == "Final de asfalto" | df$iluminación == "Desconocido"), ]
unique(df$carretera)
unique(df$iluminación)
for (var in names(df)[cat_vars]) {
# Crear tabla de contingencia
tabla <- table(df$severidad, df[[var]])
# Convertir la tabla a un formato 'data.frame' para usar con ggplot
df_tabla <- as.data.frame(tabla)
colnames(df_tabla) <- c("Severidad", "Categoría", "Frecuencia")
df_tabla$fill_color <- ifelse(df_tabla$Frecuencia < 5, "pink", "lightblue")
# Crear gráfico de la tabla de contingencia usando ggplot
p <- ggplot(df_tabla, aes(x = Severidad, y = Categoría, fill = fill_color)) +
geom_tile() +
geom_text(aes(label = Frecuencia), color = "white", size = 6) +
scale_fill_identity() +  # Usar los colores definidos
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = paste("Tabla de Contingencia: Severidad vs", var), fill = "Frecuencia")
# Guardar la imagen en formato JPG
ggsave(paste0("contingency_table_", var, ".png"), plot = p, width = 8, height = 6, dpi = 300)
}
for (var in names(df)[cat_vars]) {
# Crear tabla de contingencia
tabla <- table(df$severidad, df[[var]])
# Convertir la tabla a un formato 'data.frame' para usar con ggplot
df_tabla <- as.data.frame(tabla)
colnames(df_tabla) <- c("Severidad", "Categoría", "Frecuencia")
df_tabla$fill_color <- ifelse(df_tabla$Frecuencia < 5, "pink", "lightblue")
# Crear gráfico de la tabla de contingencia usando ggplot
p <- ggplot(df_tabla, aes(x = Severidad, y = Categoría, fill = fill_color)) +
geom_tile() +
geom_text(aes(label = Frecuencia), color = "white", size = 6) +
scale_fill_identity() +  # Usar los colores definidos
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = paste("Tabla de Contingencia: Severidad vs", var), fill = "Frecuencia")
# Guardar la imagen en formato JPG
ggsave(paste0("contingency_table_", var, ".png"), plot = p, width = 8, height = 6, dpi = 300)
}
cat_vars
# Crear tabla de contingencia
tabla <- table(df$severidad, df[[var]])
for (var in names(df)[cat_vars]) {
# Crear tabla de contingencia
tabla <- table(df$severidad, df[[var]])
# Convertir la tabla a un formato 'data.frame' para usar con ggplot
df_tabla <- as.data.frame(tabla)
colnames(df_tabla) <- c("Severidad", "Categoría", "Frecuencia")
df_tabla$fill_color <- ifelse(df_tabla$Frecuencia < 5, "pink", "lightblue")
# Crear gráfico de la tabla de contingencia usando ggplot
p <- ggplot(df_tabla, aes(x = Severidad, y = Categoría, fill = fill_color)) +
geom_tile() +
geom_text(aes(label = Frecuencia), color = "white", size = 6) +
scale_fill_identity() +  # Usar los colores definidos
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = paste("Tabla de Contingencia: Severidad vs", var), fill = "Frecuencia")
# Guardar la imagen en formato JPG
ggsave(paste0("contingency_table_", var, ".png"), plot = p, width = 8, height = 6, dpi = 300)
}
for (var in names(df)[cat_vars]) {
# Crear tabla de contingencia
tabla <- table(df$severidad, df[[var]])
# Convertir la tabla a un formato 'data.frame' para usar con ggplot
df_tabla <- as.data.frame(tabla)
colnames(df_tabla) <- c("Severidad", "Categoría", "Frecuencia")
df_tabla$fill_color <- ifelse(df_tabla$Frecuencia < 5, "pink", "lightblue")
# Crear gráfico de la tabla de contingencia usando ggplot
p <- ggplot(df_tabla, aes(x = Severidad, y = Categoría, fill = fill_color)) +
geom_tile() +
geom_text(aes(label = Frecuencia), color = "white", size = 6) +
scale_fill_identity() +  # Usar los colores definidos
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = paste("Tabla de Contingencia: Severidad vs", var), fill = "Frecuencia")
# Guardar la imagen en formato JPG
ggsave(paste0("contingency_table_", var, ".png"), plot = p, width = 8, height = 6, dpi = 300)
}
for (var in names(df)[cat_vars]) {
# Crear tabla de contingencia
tabla <- table(df$severidad, df[[var]])
print(tabla)
}
# Cargar paquetes necesarios
library(tidyverse)
library(janitor)
library(readr)
# Cargar y limpiar el dataset
df <- read_csv("../data/data_traducida.csv") %>% select(-colnames(df)[1])
df <- df[!(df$carretera == "Final del asfalto" | df$iluminación == "Desconocido"), ]
# Convertir severidad a factor
df$severidad <- as.factor(df$severidad)
# Eliminar columnas con demasiados NA
df <- df %>% select(where(~ mean(is.na(.)) < 0.3))
# Identificar variables válidas (excluyendo la variable objetivo)
variables <- setdiff(colnames(df), "severidad")
# Crear tabla de resultados
resultados <- data.frame(variable = character(),
tipo = character(),
prueba = character(),
p_value = numeric(),
stringsAsFactors = FALSE)
# Recorrer las variables
for (var in variables) {
variable <- df[[var]]
if (is.numeric(variable)) {
# Prueba t si hay solo 2 niveles, si no, ANOVA
if (nlevels(df$severidad) == 2) {
p <- tryCatch(t.test(variable ~ severidad, data = df)$p.value, error = function(e) NA)
test <- "t-test"
} else {
modelo <- tryCatch(aov(variable ~ severidad, data = df), error = function(e) NULL)
p <- if (!is.null(modelo)) summary(modelo)[[1]][["Pr(>F)"]][1] else NA
test <- "ANOVA"
}
resultados <- rbind(resultados, data.frame(variable = var, tipo = "numérica", prueba = test, p_value = p))
} else if (is.character(variable) || is.factor(variable)) {
tabla <- table(df[[var]], df$severidad)
if (all(dim(tabla) > 1)) {
p <- tryCatch(chisq.test(tabla)$p.value, error = function(e) NA)
resultados <- rbind(resultados, data.frame(variable = var, tipo = "categórica", prueba = "chi-cuadrado", p_value = p))
}
}
}
# Ordenar y filtrar por significancia (p < 0.05)
resultados_significativos <- resultados %>%
filter(!is.na(p_value), p_value < 0.05) %>%
arrange(p_value)
# Mostrar los 5 más significativos
print(head(resultados_significativos, 5))
# Exportar maqueta de resultados
write_csv(resultados_significativos, "resultados_significativos.csv")
shapiro.test(df$severidad)
qqline(df$severidad, col = "red")
hist(df$severidad, main = "Histograma", xlab = "Heridas menores")
num_vars <- sapply(df, is.numeric)
df_num <- df[, num_vars]
# 2. Aplicar la prueba de normalidad a cada variable numérica
for (var in names(df_num)) {
cat("\n==============================\n")
cat("Variable:", var, "\n")
cat("N:", length(df_num[[var]]), "\n")
cat("Media:", mean(df_num[[var]], na.rm = TRUE), "\n")
cat("Desviación estándar:", sd(df_num[[var]], na.rm = TRUE), "\n")
# Histograma
hist(df_num[[var]], main = paste("Histograma de", var), xlab = var, col = "skyblue", breaks = 50)
# QQ plot
qqnorm(df_num[[var]], main = paste("Q-Q plot de", var))
qqline(df_num[[var]], col = "red")
# Pausa para ver gráficos
readline(prompt = "Presiona [Enter] para continuar...")
}
cat_vars <- sapply(df, is.factor)
cat_vars["severidad"] <- FALSE  # excluir variable dependiente
# 2. Inicializar lista para resultados
resultados <- list()
# 3. Evaluar cada variable categórica contra severidad
for (var in names(df)[cat_vars]) {
tabla <- table(df$severidad, df[[var]])
# Intentar prueba Chi-cuadrado
chi <- suppressWarnings(chisq.test(tabla))
# Evaluar supuestos
esperado <- chi$expected
valido <- all(esperado >= 1) & mean(esperado < 5) <= 0.2
if (valido) {
p_value <- chi$p.value
prueba <- "Chi-cuadrado"
} else {
# Usar prueba de Fisher
fisher <- suppressWarnings(fisher.test(tabla, simulate.p.value = TRUE, B = 10000))
p_value <- fisher$p.value
prueba <- "Fisher"
}
resultados[[var]] <- data.frame(
variable = var,
prueba = prueba,
p_value = p_value,
valido_chi = valido
)
}
# 4. Combinar resultados
resultado_final <- do.call(rbind, resultados)
rownames(resultado_final) <- NULL
# 5. Mostrar
print(resultado_final)
for (var in names(df)[cat_vars]) {
# Crear tabla de contingencia
tabla <- table(df$severidad, df[[var]])
print(tabla)
}
categorical_vars <- c("festivos", "iluminacion", "carretera", "clima")
# Crear tabla de contingencia y guardarla como imagen
for (var in names(df)[cat_vars]) {
# Crear tabla de contingencia
tabla <- table(df$severidad, df[[var]])
# Convertir la tabla a un formato 'data.frame' para usar con ggplot
df_tabla <- as.data.frame(tabla)
colnames(df_tabla) <- c("Severidad", "Categoría", "Frecuencia")
df_tabla$fill_color <- ifelse(df_tabla$Frecuencia < 5, "pink", "lightblue")
# Crear gráfico de la tabla de contingencia usando ggplot
p <- ggplot(df_tabla, aes(x = Severidad, y = Categoría, fill = fill_color)) +
geom_tile() +
geom_text(aes(label = Frecuencia), color = "white", size = 6) +
scale_fill_identity() +  # Usar los colores definidos
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = paste("Tabla de Contingencia: Severidad vs", var), fill = "Frecuencia")
# Guardar la imagen en formato JPG
ggsave(paste0("contingency_table_", var, ".jpg"), plot = p, width = 8, height = 6, dpi = 300)
}
df <- df[!(df$carretera == "Final de asfalto" | df$iluminación == "Desconocido"), ]
unique(df$carretera)
unique(df$iluminación)
for (var in names(df)[cat_vars]) {
# Crear tabla de contingencia
tabla <- table(df$severidad, df[[var]])
print(tabla)
}
cat_vars
for (var in names(df)[cat_vars]) {
# Crear tabla de contingencia
tabla <- table(df$severidad, df[[var]])
print(tabla)
}
df
for (var in names(df)[cat_vars]) {
# Crear tabla de contingencia
tabla <- table(df$severidad, df[[var]])
print(tabla)
}
